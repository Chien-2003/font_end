<Link
href={subHref}
className={`block rounded-md p-3 leading-none no-underline outline-none transition-colors duration-200 hover:bg-primary/10 focus:bg-primary/10 focus:text-primary hover:text-primary ${
isSubActive
? 'text-primary font-semibold hover:text-primary'
: 'dark:text-white hover:text-primary'
}`}
>
{sub.name}
{/* <div className="text-sm font-semibold hover:text-primary">
{sub.name}
</div> */}
{/* <div className="line-clamp-2 text-xs dark:text-white">
{sub.name}
</div> */}
</Link>

{
  // üåà Giao di·ªán & theme
  "workbench.colorTheme": "Dracula Theme",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "none",
  "workbench.statusBar.visible": true,
  "workbench.activityBar.visible": true,
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.tree.indent": 16,
  "workbench.editor.enablePreview": false,
  "window.zoomLevel": 0,

  // ‚ú® Font & Typography
  "editor.fontFamily": "'MonoLisa', 'JetBrains Mono', 'Fira Code', 'Cascadia Code', Consolas, monospace",
  "editor.fontSize": 14,
  "editor.lineHeight": 22,
  "editor.letterSpacing": 0.5,
  "editor.cursorStyle": "line",
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": true,

  // üöÄ Tr·∫£i nghi·ªám vi·∫øt code
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.detectIndentation": false,
  "editor.smoothScrolling": true,
  "editor.scrollBeyondLastLine": true,
  "editor.wordWrap": "on",
  "editor.minimap.enabled": false,
  "editor.renderWhitespace": "boundary",
  "editor.renderControlCharacters": false,
  "editor.renderIndentGuides": true,
  "editor.guides.bracketPairs": "active",
  "editor.formatOnSave": true,
  "editor.autoClosingBrackets": "always",
  "editor.autoClosingQuotes": "always",
  "editor.codeActionsOnSave": {
    "source.fixAll": true,
    "source.organizeImports": true
  },

  // üß† IntelliSense th√¥ng minh
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": true
  },
  "editor.parameterHints.enabled": true,
  "editor.suggestSelection": "first",
  "editor.snippetSuggestions": "top",
  "typescript.suggest.completeFunctionCalls": true,
  "javascript.suggest.completeFunctionCalls": true,

  // üìê Format code ƒë·∫πp v·ªõi Prettier
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "prettier.singleQuote": true,
  "prettier.trailingComma": "all",
  "prettier.semi": true,
  "prettier.arrowParens": "avoid",
  "prettier.printWidth": 100,

  // üßπ File Explorer & qu·∫£n l√Ω file
  "files.autoSave": "onWindowChange",
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/node_modules": true,
    "**/dist": true,
    "**/build": true,
    "**/.next": true
  },
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.sortOrder": "type",

  // üñ•Ô∏è Terminal
  "terminal.integrated.fontFamily": "'JetBrains Mono', 'Fira Code', monospace",
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.scrollback": 10000,

  // üí° Emmet cho React + Tailwind
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact",
    "plaintext": "html"
  },
  "emmet.triggerExpansionOnTab": true,
  "tailwindCSS.emmetCompletions": true,
  "tailwindCSS.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },

  // üîß Git & SC
  "git.enableSmartCommit": true,
  "git.autofetch": true,
  "git.confirmSync": false,
  "diffEditor.ignoreTrimWhitespace": false,

  // üîé UI ti·ªán l·ª£i
  "breadcrumbs.enabled": true,
  "editor.hover.enabled": true,
  "editor.lightbulb.enabled": true,
  "outline.icons": true,
  "outline.problems.enabled": true,
  "debug.openDebug": "neverOpen",

  // üåç Language tweak
  "json.schemaDownload.enable": true,
  "typescript.updateImportsOnFileMove.enabled": "always"
}
/////
'use client';

import { Category, getAllCategories } from '@/lib/categoryApi';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';

// H√†m chia m·∫£ng th√†nh c√°c nh√≥m nh·ªè size = 4 (ƒë·ªÉ l√†m c·ªôt submenu)
function chunkArray<T>(arr: T[], size: number): T[][] {
  const result: T[][] = [];
  for (let i = 0; i < arr.length; i += size) {
    result.push(arr.slice(i, i + size));
  }
  return result;
}

export default function NavLinks({ className = '' }: { className?: string }) {
  const pathname = usePathname();
  const [categories, setCategories] = useState<Category[]>([]);
  const [hoveredCategoryId, setHoveredCategoryId] = useState<string | null>(null);

  useEffect(() => {
    async function fetchCategories() {
      try {
        const data = await getAllCategories();

        // S·∫Øp x·∫øp theo th·ª© t·ª± mong mu·ªën
        const desiredOrder = ['Trang ph·ª•c nam', 'Trang ph·ª•c n·ªØ', 'Ph·ª• ki·ªán'];
        const sortedData = desiredOrder
          .map((name) => data.find((cat) => cat.name === name))
          .filter(Boolean) as Category[];

        setCategories(sortedData);
      } catch (err) {
        console.error('Error fetching categories:', err);
      }
    }

    fetchCategories();
  }, []);

  const staticLinks = [
    { name: 'Li√™n h·ªá', href: '/lien-he' },
    { name: 'V·ªÅ ch√∫ng t√¥i', href: '/ve-chung-toi' },
    { name: 'Blog', href: '/blog' },
  ];

  return (
    <nav className={`${className} bg-background dark:bg-gray-900`}>
      <ul className="flex gap-4 px-6 py-3 relative">
        {categories.map((category) => {
          const href = `/${category.slug_category}`;
          const isActive = pathname === href || pathname.startsWith(`${href}/`);
          const subcats = category.subcategories ?? [];
          const hasSubmenu = subcats.length > 0;

          return (
            <li
              key={category.id}
              className="relative"
              onMouseEnter={() => setHoveredCategoryId(category.id)}
              onMouseLeave={() => setHoveredCategoryId(null)}
            >
              <Link
                href={href}
                className={`uppercase text-sm font-semibold px-4 py-2 rounded-md block transition-colors duration-200 ${
                  isActive
                    ? 'text-primary bg-primary/10 dark:bg-primary/20'
                    : 'dark:text-white hover:text-primary hover:bg-muted/50 dark:hover:text-primary dark:hover:bg-muted/30'
                }`}
              >
                {category.name}
              </Link>

              {hasSubmenu && hoveredCategoryId === category.id && (
                <div className="absolute top-full left-0 mt-2 bg-white dark:bg-gray-900 rounded-md shadow-lg p-4 min-w-[400px] md:min-w-[480px] lg:min-w-[520px] w-full z-50 border border-gray-200 dark:border-gray-700">
                  <div className="flex gap-x-8">
                    {chunkArray(subcats, 4).map((group, idx) => (
                      <ul key={idx} className="flex flex-col space-y-2">
                        {group.map((sub) => {
                          const subHref = `${href}/${sub.slug}`;
                          const isSubActive = pathname === subHref;
                          return (
                            <li key={sub.id}>
                              <Link
                                href={subHref}
                                className={`block rounded-md p-3 leading-none no-underline outline-none transition-colors duration-200 hover:bg-primary/10 focus:bg-primary/10 focus:text-primary hover:text-primary ${
                                  isSubActive
                                    ? 'text-primary font-semibold hover:text-primary'
                                    : 'dark:text-white hover:text-primary'
                                }`}
                              >
                                {sub.name}
                              </Link>
                            </li>
                          );
                        })}
                      </ul>
                    ))}
                  </div>
                </div>
              )}
            </li>
          );
        })}
        {staticLinks.map((link) => {
          const isActive = pathname === link.href;
          return (
            <li key={link.name}>
              <Link
                href={link.href}
                className={`uppercase text-sm font-semibold px-4 py-2 rounded-md block transition-colors duration-200 ${
                  isActive
                    ? 'text-primary bg-primary/10 dark:bg-primary/20'
                    : 'dark:text-white hover:text-primary hover:bg-muted/50 dark:hover:text-primary dark:hover:bg-muted/30'
                }`}
              >
                {link.name}
              </Link>
            </li>
          );
        })}
      </ul>
    </nav>
  );
}
