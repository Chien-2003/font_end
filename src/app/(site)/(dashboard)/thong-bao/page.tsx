'use client';
import {
  AlertCircle,
  Bell,
  CheckCircle,
  Clock,
  Gift,
  Newspaper,
  Package,
  Settings,
  Star,
  Truck,
} from 'lucide-react';
import { Fragment, useState } from 'react';
type Notification = {
  id: number;
  title: string;
  message: string;
  time: string;
  type: string;
  isNew: boolean;
};
type TabKey = 'promotions' | 'orders' | 'news' | 'system';
type Notifications = Record<TabKey, Notification[]>;
const NotificationPage = () => {
  const [activeTab, setActiveTab] = useState<TabKey>('promotions');
  const [notifications, setNotifications] = useState<Notifications>({
    promotions: [
      {
        id: 1,
        title: 'üéâ FLASH SALE 50% - B·ªô S∆∞u T·∫≠p Thu ƒê√¥ng',
        message:
          'Gi·∫£m ngay 50% cho t·∫•t c·∫£ s·∫£n ph·∫©m b·ªô s∆∞u t·∫≠p thu ƒë√¥ng 2025. Ch·ªâ c√≤n 2 ng√†y!',
        time: '2 gi·ªù tr∆∞·ªõc',
        type: 'urgent',
        isNew: true,
      },
      {
        id: 2,
        title: 'üíù ∆Øu ƒë√£i th√†nh vi√™n VIP',
        message:
          'B·∫°n ƒë∆∞·ª£c t·∫∑ng voucher 200k cho ƒë∆°n h√†ng t·ª´ 1.5 tri·ªáu. M√£: VIP200',
        time: '1 ng√†y tr∆∞·ªõc',
        type: 'exclusive',
        isNew: true,
      },
      {
        id: 3,
        title: 'üõçÔ∏è Freeship to√†n qu·ªëc',
        message:
          'Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho t·∫•t c·∫£ ƒë∆°n h√†ng t·ª´ 500k. √Åp d·ª•ng ƒë·∫øn h·∫øt th√°ng.',
        time: '3 ng√†y tr∆∞·ªõc',
        type: 'shipping',
        isNew: false,
      },
    ],
    orders: [
      {
        id: 1,
        title: 'üì¶ ƒê∆°n h√†ng #DH2025001 ƒëang ƒë∆∞·ª£c giao',
        message:
          'ƒê∆°n h√†ng √Åo kho√°c d·∫° n·ªØ cao c·∫•p ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn b·∫°n.',
        time: '30 ph√∫t tr∆∞·ªõc',
        type: 'shipping',
        isNew: true,
      },
      {
        id: 2,
        title: '‚úÖ ƒê∆°n h√†ng #DH2025002 giao th√†nh c√¥ng',
        message:
          'C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng! H√£y ƒë√°nh gi√° s·∫£n ph·∫©m ƒë·ªÉ nh·∫≠n th√™m ∆∞u ƒë√£i.',
        time: '2 ng√†y tr∆∞·ªõc',
        type: 'delivered',
        isNew: false,
      },
      {
        id: 3,
        title: '‚è≥ ƒê∆°n h√†ng #DH2025003 ƒëang chu·∫©n b·ªã',
        message:
          'ƒê∆°n h√†ng Set v√°y c√¥ng s·ªü ƒëang ƒë∆∞·ª£c ƒë√≥ng g√≥i c·∫©n th·∫≠n.',
        time: '1 ng√†y tr∆∞·ªõc',
        type: 'processing',
        isNew: false,
      },
    ],
    news: [
      {
        id: 1,
        title: "‚ú® BST Xu√¢n H√® 2025: 'Urban Chic'",
        message:
          'Kh√°m ph√° phong c√°ch ƒë√¥ th·ªã hi·ªán ƒë·∫°i v·ªõi BST m·ªõi nh·∫•t t·ª´ th∆∞∆°ng hi·ªáu.',
        time: '1 ng√†y tr∆∞·ªõc',
        type: 'collection',
        isNew: true,
      },
      {
        id: 2,
        title: 'üì∏ Lookbook: 5 c√°ch ph·ªëi ƒë·ªì c√¥ng s·ªü',
        message:
          'G·ª£i √Ω ph·ªëi ƒë·ªì c√¥ng s·ªü thanh l·ªãch v√† chuy√™n nghi·ªáp cho n·ªØ gi·ªõi hi·ªán ƒë·∫°i.',
        time: '3 ng√†y tr∆∞·ªõc',
        type: 'styling',
        isNew: false,
      },
      {
        id: 3,
        title: 'üé¨ Behind the scenes: Bu·ªïi ch·ª•p BST',
        message:
          'C√πng kh√°m ph√° h·∫≠u tr∆∞·ªùng bu·ªïi ch·ª•p h√¨nh BST Urban Chic ƒë·∫ßy th√∫ v·ªã.',
        time: '1 tu·∫ßn tr∆∞·ªõc',
        type: 'video',
        isNew: false,
      },
    ],
    system: [
      {
        id: 1,
        title: 'üîí C·∫≠p nh·∫≠t ch√≠nh s√°ch b·∫£o m·∫≠t',
        message:
          'Ch√∫ng t√¥i ƒë√£ c·∫≠p nh·∫≠t ch√≠nh s√°ch b·∫£o m·∫≠t ƒë·ªÉ b·∫£o v·ªá th√¥ng tin c√° nh√¢n c·ªßa b·∫°n t·ªët h∆°n.',
        time: '1 tu·∫ßn tr∆∞·ªõc',
        type: 'security',
        isNew: false,
      },
      {
        id: 2,
        title: 'üõ†Ô∏è B·∫£o tr√¨ h·ªá th·ªëng',
        message:
          'Website s·∫Ω b·∫£o tr√¨ t·ª´ 2:00-4:00 s√°ng ng√†y 5/9. Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán.',
        time: '2 tu·∫ßn tr∆∞·ªõc',
        type: 'maintenance',
        isNew: false,
      },
    ],
  });

  const tabs = [
    {
      id: 'promotions' as TabKey,
      label: 'Khuy·∫øn M√£i',
      icon: Gift,
      count: notifications.promotions.filter((n) => n.isNew).length,
    },
    {
      id: 'orders' as TabKey,
      label: 'ƒê∆°n H√†ng',
      icon: Package,
      count: notifications.orders.filter((n) => n.isNew).length,
    },
    {
      id: 'news' as TabKey,
      label: 'Tin T·ª©c',
      icon: Newspaper,
      count: notifications.news.filter((n) => n.isNew).length,
    },
    {
      id: 'system' as TabKey,
      label: 'H·ªá Th·ªëng',
      icon: Settings,
      count: notifications.system.filter((n) => n.isNew).length,
    },
  ];

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'urgent':
        return <AlertCircle className="w-5 h-5 text-red-500" />;
      case 'exclusive':
        return <Star className="w-5 h-5 text-yellow-500" />;
      case 'shipping':
        return <Truck className="w-5 h-5 text-blue-500" />;
      case 'delivered':
        return <CheckCircle className="w-5 h-5 text-green-500" />;
      case 'processing':
        return <Clock className="w-5 h-5 text-orange-500" />;
      default:
        return <Bell className="w-5 h-5 text-gray-500" />;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case 'urgent':
        return 'border-l-red-500 bg-red-50 dark:bg-red-950/20';
      case 'exclusive':
        return 'border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20';
      case 'shipping':
        return 'border-l-blue-500 bg-blue-50 dark:bg-blue-950/20';
      case 'delivered':
        return 'border-l-green-500 bg-green-50 dark:bg-green-950/20';
      case 'processing':
        return 'border-l-orange-500 bg-orange-50 dark:bg-orange-950/20';
      default:
        return 'border-l-gray-300 bg-gray-50 dark:bg-gray-800/20';
    }
  };

  return (
    <Fragment>
      <div className="mx-auto max-w-full md:px-14 xl:px-15 2xl:px-16 px-4 sm:px-6 lg:px-15 w-full h-full py-8">
        <div className="max-w-6xl mx-auto">
          <div className="mb-8 text-center">
            <h1 className="text-4xl font-bold text-foreground mb-2 animate-fade-in">
              üîî Trung T√¢m Th√¥ng B√°o
            </h1>
            <p className="text-muted-foreground text-lg">
              C·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t v·ªÅ khuy·∫øn m√£i, ƒë∆°n h√†ng v√†
              tin t·ª©c th·ªùi trang
            </p>
          </div>
          <div className="mb-8">
            <div className="flex flex-wrap justify-center gap-2 p-2 bg-muted/50 rounded-xl backdrop-blur-sm">
              {tabs.map((tab, index) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`relative flex items-center gap-2 px-6 py-3 rounded-lg font-medium transition-all duration-300 transform hover:scale-105 cursor-pointer ${
                      activeTab === tab.id
                        ? 'bg-primary text-primary-foreground shadow-lg scale-105'
                        : 'text-muted-foreground hover:text-foreground hover:bg-accent/50'
                    }
                    `}
                    style={{
                      animationDelay: `${index * 0.1}s`,
                    }}
                  >
                    <Icon className="w-5 h-5" />
                    <span>{tab.label}</span>
                    {tab.count > 0 && (
                      <span className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center animate-pulse">
                        {tab.count}
                      </span>
                    )}
                  </button>
                );
              })}
            </div>
          </div>
          <div className="min-h-[600px]">
            <div
              key={activeTab}
              className="space-y-4 animate-slide-in"
            >
              {notifications[activeTab]?.length > 0 ? (
                notifications[activeTab].map(
                  (notification: any, index: number) => (
                    <div
                      key={notification.id}
                      className={`relative p-6 rounded-xl border-l-4 shadow-sm transition-all duration-300 hover:shadow-lg hover:-translate-y-1 cursor-pointer ${getTypeColor(notification.type)} ${notification.isNew ? 'ring-2 ring-primary/20' : ''}`}
                      style={{
                        animationDelay: `${index * 0.1}s`,
                      }}
                    >
                      {notification.isNew && (
                        <div className="absolute top-4 right-4">
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-500 text-white animate-pulse">
                            M·ªõi
                          </span>
                        </div>
                      )}

                      <div className="flex items-start gap-4">
                        <div className="flex-shrink-0 mt-1">
                          {getNotificationIcon(notification.type)}
                        </div>

                        <div className="flex-1">
                          <h3 className="text-lg font-semibold text-foreground mb-2 leading-tight">
                            {notification.title}
                          </h3>
                          <p className="text-muted-foreground mb-3 leading-relaxed">
                            {notification.message}
                          </p>
                          <p className="text-sm text-muted-foreground/70 flex items-center gap-1">
                            <Clock className="w-4 h-4" />
                            {notification.time}
                          </p>
                        </div>
                      </div>
                    </div>
                  ),
                )
              ) : (
                <div className="text-center py-16">
                  <div className="w-24 h-24 mx-auto mb-4 opacity-20">
                    <Bell className="w-full h-full text-muted-foreground" />
                  </div>
                  <h3 className="text-xl font-medium text-muted-foreground mb-2">
                    Ch∆∞a c√≥ th√¥ng b√°o n√†o
                  </h3>
                  <p className="text-muted-foreground">
                    Th√¥ng b√°o m·ªõi s·∫Ω xu·∫•t hi·ªán t·∫°i ƒë√¢y
                  </p>
                </div>
              )}
            </div>
          </div>
          <div className="mt-12 grid grid-cols-2 md:grid-cols-4 gap-4">
            {tabs.map((tab, index) => {
              const Icon = tab.icon;
              return (
                <div
                  key={tab.id}
                  className="text-center p-4 bg-card rounded-lg border hover:shadow-md transition-all duration-300"
                  style={{ animationDelay: `${index * 0.1}s` }}
                >
                  <Icon className="w-8 h-8 mx-auto mb-2 text-primary" />
                  <div className="text-2xl font-bold text-foreground">
                    {notifications[tab.id]?.length || 0}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    {tab.label}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </Fragment>
  );
};

export default NotificationPage;
